package jp.gr.java_conf.neko_daisuki.fsyscall.slave;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import jp.gr.java_conf.neko_daisuki.fsyscall.Command;
import jp.gr.java_conf.neko_daisuki.fsyscall.CommandDispatcher;
import jp.gr.java_conf.neko_daisuki.fsyscall.Encoder;
import jp.gr.java_conf.neko_daisuki.fsyscall.Errno;
import jp.gr.java_conf.neko_daisuki.fsyscall.L;
import jp.gr.java_conf.neko_daisuki.fsyscall.PayloadSize;
import jp.gr.java_conf.neko_daisuki.fsyscall.Pid;
import jp.gr.java_conf.neko_daisuki.fsyscall.ProtocolError;
import jp.gr.java_conf.neko_daisuki.fsyscall.SyscallResult;
import jp.gr.java_conf.neko_daisuki.fsyscall.UnixConstants;
import jp.gr.java_conf.neko_daisuki.fsyscall.io.SyscallInputStream;
import jp.gr.java_conf.neko_daisuki.fsyscall.io.SyscallOutputStream;

@IMPORTS@;

public class Slave extends Worker {

    private static class Logger {

        public static void info(String message) {
            L.info(buildMessage(message));
        }

        private static String buildMessage(String message) {
            return String.format("Slave: %s", message);
        }
    }

    private static class UnixException extends Exception {

        private Errno mErrno;

        public UnixException(Errno errno, Throwable e) {
            super(e);
            initialize(errno);
        }

        public UnixException(Errno errno) {
            initialize(errno);
        }

        public Errno getErrno() {
            return mErrno;
        }

        private void initialize(Errno errno) {
            mErrno = errno;
        }
    }

    private interface UnixFile {

        public int read(byte[] buffer) throws UnixException;
        public void close() throws UnixException;
    }

    private static class UnixInputFile implements UnixFile {

        private InputStream mIn;

        public UnixInputFile(InputStream in) {
            mIn = in;
        }

        public int read(byte[] buffer) throws UnixException {
            int nBytes;
            try {
                nBytes = mIn.read(buffer);
            }
            catch (IOException e) {
                throw new UnixException(Errno.EIO, e);
            }
            return nBytes != -1 ? nBytes : 0;
        }

        public void close() throws UnixException {
            try {
                mIn.close();
            }
            catch (IOException e) {
                throw new UnixException(Errno.EBADF, e);
            }
        }
    }

    private static class UnixOutputFile implements UnixFile {

        private OutputStream mOut;

        public UnixOutputFile(OutputStream out) {
            mOut = out;
        }

        public int read(byte[] buffer) throws UnixException {
            throw new UnixException(Errno.EBADF);
        }

        public void close() throws UnixException {
            try {
                mOut.close();
            }
            catch (IOException e) {
                throw new UnixException(Errno.EBADF, e);
            }
        }
    }

    @PROCS@

    private class ExitProc extends CommandDispatcher.Proc {

        public void call(Command command) throws IOException {
            ExitArgs args = new ExitArgs();
            args.rval = mIn.readInteger();
            doExit(args);
        }
    }

    private static final int UNIX_FILE_NUM = 256;

    private Application mApplication;
    private SyscallInputStream mIn;
    private SyscallOutputStream mOut;

    private UnixFile[] mFiles;

    // Cache
    private SyscallResult mResult;

    private CommandDispatcher mDispatcher;

    public Slave(Application application, InputStream in, OutputStream out) throws IOException {
        Logger.info("a slave is starting.");

        mApplication = application;
        mIn = new SyscallInputStream(in);
        mOut = new SyscallOutputStream(out);
        mDispatcher = buildDispatcher();

        mFiles = new UnixFile[UNIX_FILE_NUM];
        mFiles[0] = new UnixInputFile(System.in);
        mFiles[1] = new UnixOutputFile(System.out);
        mFiles[2] = new UnixOutputFile(System.err);

        mResult = new SyscallResult();

        writeOpenedFileDescriptors();
        Logger.info("file descripters were transfered from the slave.");
    }

    public boolean isReady() throws IOException {
        return mIn.isReady();
    }

    public void work() throws IOException {
        Logger.info("performing the work.");

        Command command = mIn.readCommand();
        Logger.info(String.format("read command: %s", command.toString()));

        CommandDispatcher.Proc proc = mDispatcher.get(command);
        if (proc == null) {
            String fmt = "cannot handle command of %s";
            throw new ProtocolError(String.format(fmt, command.toString()));
        }
        proc.call(command);

        Logger.info("finished the work.");
    }

    public SyscallResult doOpen(OpenArgs args) throws IOException {
        SyscallResult result = getSyscallResult();

        int fd = findFreeSlotOfFile();
        if (fd < 0) {
            result.n = -1;
            result.errno = Errno.ENFILE;
            return result;
        }

        String path = args.path;
        int accmode = args.flags & UnixConstants.O_ACCMODE;
        UnixFile file;
        try {
            switch (accmode) {
            case UnixConstants.O_RDONLY:
                file = new UnixInputFile(new FileInputStream(path));
                break;
            case UnixConstants.O_WRONLY:
                // XXX: Here ignores O_CREAT.
                file = new UnixOutputFile(new FileOutputStream(path));
                break;
            default:
                result.n = -1;
                result.errno = Errno.EINVAL;
                return result;
            }
        }
        catch (FileNotFoundException e) {
            result.n = -1;
            result.errno = Errno.ENOENT;
            return result;
        }
        catch (SecurityException e) {
            result.n = -1;
            result.errno = Errno.EPERM;
            return result;
        }

        mFiles[fd] = file;

        result.n = fd;
        return result;
    }

    public SyscallResult doRead(ReadArgs args) throws IOException {
        return null;
    }

    public SyscallResult doLseek(LseekArgs args) throws IOException {
        return null;
    }

    public SyscallResult doMmap(MmapArgs args) throws IOException {
        return null;
    }

    public SyscallResult doPread(PreadArgs args) throws IOException {
        return null;
    }

    public SyscallResult doIssetugid(IssetugidArgs args) throws IOException {
        return null;
    }

    public SyscallResult doLstat(LstatArgs args) throws IOException {
        return null;
    }

    public SyscallResult doFstat(FstatArgs args) throws IOException {
        return null;
    }

    public SyscallResult doStat(StatArgs args) throws IOException {
        return null;
    }

    public SyscallResult doWritev(WritevArgs args) throws IOException {
        return null;
    }

    public SyscallResult doSelect(SelectArgs args) throws IOException {
        return null;
    }

    public SyscallResult doReadlink(ReadlinkArgs args) throws IOException {
        return null;
    }

    public SyscallResult doIoctl(IoctlArgs args) throws IOException {
        return null;
    }

    public SyscallResult doAccess(AccessArgs args) throws IOException {
        return null;
    }

    public SyscallResult doLink(LinkArgs args) throws IOException {
        return null;
    }

    public SyscallResult doClose(CloseArgs args) throws IOException {
        SyscallResult result = getSyscallResult();

        int fd = args.fd;
        try {
            mFiles[fd].close();
        }
        catch (NullPointerException e) {
            result.n = -1;
            result.errno = Errno.EBADF;
            return result;
        }
        catch (UnixException e) {
            result.n = -1;
            result.errno = e.getErrno();
            return result;
        }

        mFiles[fd] = null;

        result.n = 0;
        return result;
    }

    public SyscallResult doWrite(WriteArgs args) throws IOException {
        return null;
    }

    public SyscallResult doExit(ExitArgs args) throws IOException {
        mIn.close();
        mOut.close();
        mApplication.removeSlave(this);
        mApplication.setExitStatus(args.rval);
        return null;
    }

    private SyscallResult getSyscallResult() {
        return mResult;
    }

    private void writeOpenedFileDescriptors() throws IOException {
        int fds[] = { 0, 1, 2 };
        byte[][] buffers = new byte[fds.length][];
        for (int i = 0; i < fds.length; i++) {
            buffers[i] = Encoder.encodeInteger(fds[i]);
        }
        int len = 0;
        for (int i = 0; i < fds.length; i++) {
            len += buffers[i].length;
        }

        mOut.writeInteger(len);
        for (int i = 0; i < fds.length; i++) {
            mOut.write(buffers[i]);
        }
    }

    private CommandDispatcher buildDispatcher() {
        CommandDispatcher dispatcher = new CommandDispatcher();
        @DISPATCHES@;
        return dispatcher;
    }

    private void writeResultGeneric(Command command, SyscallResult result) throws IOException {
        byte[] returnedValue = Encoder.encodeInteger(result.n);
        byte[] errno = result.n != -1 ? new byte[0] : Encoder.encodeInteger(result.errno.toInteger());
        int len = returnedValue.length + errno.length;
        PayloadSize payloadSize = PayloadSize.fromInteger(len);

        mOut.writeCommand(command);
        mOut.writePayloadSize(payloadSize);
        mOut.write(returnedValue);
        mOut.write(errno);
    }

    private int findFreeSlotOfFile() {
        int len = mFiles.length;
        int i;
        for (i = 0; (i < len) && (mFiles[i] != null); i++) {
        }
        return i < len ? i : -1;
    }
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=java
 */
