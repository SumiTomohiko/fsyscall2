package jp.gr.java_conf.neko_daisuki.fsyscall.slave;

import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import jp.gr.java_conf.neko_daisuki.fsyscall.Command;
import jp.gr.java_conf.neko_daisuki.fsyscall.CommandDispatcher;
import jp.gr.java_conf.neko_daisuki.fsyscall.Encoder;
import jp.gr.java_conf.neko_daisuki.fsyscall.Logging;
import jp.gr.java_conf.neko_daisuki.fsyscall.PayloadSize;
import jp.gr.java_conf.neko_daisuki.fsyscall.ProtocolError;
import jp.gr.java_conf.neko_daisuki.fsyscall.SyscallResult;
import jp.gr.java_conf.neko_daisuki.fsyscall.Unix.IoVec;
import jp.gr.java_conf.neko_daisuki.fsyscall.Unix.Stat;
import jp.gr.java_conf.neko_daisuki.fsyscall.Unix.TimeVal;
import jp.gr.java_conf.neko_daisuki.fsyscall.io.SyscallInputStream;
import jp.gr.java_conf.neko_daisuki.fsyscall.io.SyscallOutputStream;

public class SlaveHelper {

    private static class Payload {

        private List<byte[]> mData;

        public Payload() {
            mData = new LinkedList<byte[]>();
        }

        public PayloadSize size() {
            return PayloadSize.fromInteger(computeSize());
        }

        public void add(int n) {
            mData.add(Encoder.encodeInteger(n));
        }

        public void add(Collection<Integer> fds) {
            add(fds.size());
            for (Integer fd: fds) {
                add(fd.intValue());
            }
        }

        public byte[] toArray() {
            byte[] data = new byte[computeSize()];
            int pos = 0;
            for (byte[] a: mData) {
                int len = a.length;
                System.arraycopy(a, 0, data, pos, len);
                pos += len;
            }
            return data;
        }

        private int computeSize() {
            int size = 0;
            for (byte[] data: mData) {
                size += data.length;
            }
            return size;
        }
    }

    @PROCS@

    private class SelectProc extends CommandDispatcher.Proc {

        public void call(Command command) throws IOException {
            PayloadSize payloadSize = mIn.readPayloadSize();
            int nfds = mIn.readInteger();
            Collection<Integer> in = readFds();
            Collection<Integer> ou = readFds();
            Collection<Integer> ex = readFds();
            int flag = mIn.readInteger();
            TimeVal timeout = flag == 0 ? null : readTimeVal();
            SyscallResult.Select result = mSlave.doSelect(nfds, in, ou, ex, timeout);
            writeResult(Command.RET_SELECT, result);
        }

        private TimeVal readTimeVal() throws IOException {
            TimeVal tv = new TimeVal();
            tv.tv_sec = mIn.readLong();
            tv.tv_usec = mIn.readLong();
            return tv;
        }

        private Collection<Integer> readFds() throws IOException {
            Collection<Integer> fds = new HashSet<Integer>();
            int n = mIn.readInteger();
            for (int i = 0; i < n; i++) {
                fds.add(Integer.valueOf(mIn.readInteger()));
            }
            return fds;
        }
    }

    private class WritevProc extends CommandDispatcher.Proc {

        public void call(Command command) throws IOException {
            PayloadSize payloadSize = mIn.readPayloadSize();
            int fd = mIn.readInteger();
            int iovcnt = mIn.readInteger();
            IoVec[] iovec = new IoVec[iovcnt];
            for (int i = 0; i < iovcnt; i++) {
                iovec[i] = mIn.readIoVec();
            }
            SyscallResult.Generic32 result = mSlave.doWritev(fd, iovec);
            writeResult(Command.RET_WRITEV, result);
        }
    }

    private class ExitProc extends CommandDispatcher.Proc {

        public void call(Command command) throws IOException {
            mSlave.doExit(mIn.readInteger());
        }
    }

    private static Logging.Logger mLogger;

    private Slave mSlave;
    private SyscallInputStream mIn;
    private SyscallOutputStream mOut;

    private CommandDispatcher mDispatcher;

    public SlaveHelper(Slave slave, SyscallInputStream in, SyscallOutputStream out) {
        mSlave = slave;
        mIn = in;
        mOut = out;

        mDispatcher = buildDispatcher();
    }

    public void runSlave() throws IOException {
        Command command = mIn.readCommand();
        mLogger.info(String.format("read command: %s", command.toString()));

        CommandDispatcher.Proc proc = mDispatcher.get(command);
        if (proc == null) {
            String fmt = "cannot handle command of %s";
            throw new ProtocolError(String.format(fmt, command.toString()));
        }

        proc.call(command);
    }

    private CommandDispatcher buildDispatcher() {
        CommandDispatcher dispatcher = new CommandDispatcher();
        dispatcher.addEntry(Command.CALL_EXIT, new ExitProc());
        dispatcher.addEntry(Command.CALL_SELECT, new SelectProc());
        @DISPATCHES@;
        return dispatcher;
    }

    private void writeResult(Command command, SyscallResult.Generic64 result) throws IOException {
        byte[] returnedValue = Encoder.encodeLong(result.retval);
        byte[] errno = result.retval != -1 ? new byte[0] : Encoder.encodeInteger(result.errno.toInteger());

        writeResult(command, returnedValue, errno);
    }

    private void writeResult(Command command, SyscallResult.Generic32 result) throws IOException {
        byte[] returnedValue = Encoder.encodeInteger(result.retval);
        byte[] errno = result.retval != -1 ? new byte[0] : Encoder.encodeInteger(result.errno.toInteger());

        writeResult(command, returnedValue, errno);
    }

    private void writeResult(Command command, byte[] returnedValue, byte[] errno) throws IOException {
        int len = returnedValue.length + errno.length;
        PayloadSize payloadSize = PayloadSize.fromInteger(len);

        mOut.write(command);
        mOut.write(payloadSize);
        mOut.write(returnedValue);
        mOut.write(errno);
    }

    private void writeResult(Command command, SyscallResult.Select result) throws IOException {
        if (result.retval == -1) {
            SyscallResult.Generic32 e = new SyscallResult.Generic32();
            e.retval = result.retval;
            e.errno = result.errno;
            writeResult(command, e);
            return;
        }

        Payload payload = new Payload();
        payload.add(result.retval);
        if (0 < result.retval) {
            payload.add(result.in);
            payload.add(result.ou);
            payload.add(result.ex);
        }

        mOut.write(command);
        mOut.write(payload.size());
        mOut.write(payload.toArray());
    }

    @WRITE_RESULT@

    static {
        mLogger = new Logging.Logger("SlaveHelper");
    }
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=java
 */
