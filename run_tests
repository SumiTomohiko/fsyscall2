#!/bin/sh

# usage: run_tests [tests...]
# If no test is given, run_tests tests all test_* under tests directory.

show_title()
{
	local cmd len mark screen_size title unused

	mark="$1"
	title=" $2 "
	screen_size="80"
	cmd="echo -n \"\${mark}\""
	len=$(((${screen_size} - ${#title}) / 2))
	for unused in $(jot ${len})
	do
		eval ${cmd}
	done
	echo -n "${title}"
	for unused in $(jot ${len})
	do
		eval ${cmd}
	done
	if [ $((2 * ${len} + ${#title})) != "${screen_size}" ]; then
		eval ${cmd}
	fi
	echo
}

typename()
{
	local name

	name="${1}"

	type "${name}" 2>/dev/null | sed -e "s/^.* is a //"
}

print_result()
{
	echo "${1}: ${2}"
}

test_result()
{
	local status
	local result
	status="${1}"

	if [ "${status}" = "0" ]; then
		result="OK"
	else
		result="NG"
	fi
	echo "${result}"
}

isset()
{
	local name
	name="$1"

	set | grep -o "^${name}="
}

dir="$(dirname $0)"
tests_dir="${dir}/tests"
tester="${tests_dir}/tester/tester"
tmp_dir="${dir}/tmp.tests"
arch=$(uname -p)

rm -rf "${tmp_dir}" || exit 1
mkdir -p "${tmp_dir}" || exit 1

if [ $# -eq 0 ]; then
	tests=$(find "${tests_dir}" -name "test_*" | sort)
else
	tests="${@}"
fi

show_title "*" "Running Tests"
summary=""
for t in ${tests}
do
	show_title "=" "${t}"

	unset args cmd expected_status expected_stdout status unexpected_status
	unset -f test_status
	. "${t}"

	if [ "$(typename precmd)" = "shell function" ]; then
		precmd
	fi

	exe="${tests_dir}/${arch}/${cmd}"
	stdout_log="${tmp_dir}/stdout.log"
	"${tester}" "${exe}" ${args} > "${stdout_log}"
	status="${?}"

	if [ -n "$(isset expected_status)" ]; then
		if [ "${expected_status}" -eq "${status}" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ -n "$(isset expected_stdout)" ]; then
		if [ "${expected_stdout}" = "$(cat ${stdout_log})" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ -n "$(isset unexpected_status)" ]; then
		if [ "${unexpected_status}" != "${status}" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ "$(typename test_status)" = "shell function" ]; then
		test_status "${status}"
		result=$(test_result "${?}")
	else
		testcmd
		result=$(test_result "${?}")
	fi

	print_result "${t}" "${result}"
	if [ "${result}" != "OK" ]; then
		summary="${t}
${summary}"
	fi

	if [ "$(typename postcmd)" = "shell function" ]; then
		postcmd
	fi
done

rm -rf "${tmp_dir}" || exit 1

show_title "*" "Summary"
if [ -n "${summary}" ]; then
	echo -n "${summary}" | sort
else
	echo "No Failure \(^o^)/"
fi
