#!/bin/sh

typename()
{
	local name

	name="${1}"

	type "${name}" 2>/dev/null | sed -e "s/^.* is a //"
}

print_result()
{
	echo "${1}: ${2}"
}

test_result()
{
	local status
	local result
	status="${1}"

	if [ "${status}" = "0" ]; then
		result="OK"
	else
		result="NG"
	fi
	echo "${result}"
}

dir="$(dirname $0)"
tests_dir="${dir}/tests"
tester="${tests_dir}/tester/tester"
tmp_dir="${dir}/tmp.tests"
arch=$(uname -p)

rm -rf "${tmp_dir}" || exit 1
mkdir -p "${tmp_dir}" || exit 1

if [ -z "${@}" ]; then
	tests=$(find "${tests_dir}" -name "test_*" | sort)
else
	tests="${@}"
fi

for t in ${tests}
do
	echo "******** ${t} ********"

	unset args cmd expected_status expected_stdout status unexpected_status
	unset -f test_status
	. "${t}"

	if [ "$(typename precmd)" = "shell function" ]; then
		precmd
	fi

	exe="${tests_dir}/${arch}/${cmd}"
	stdout_log="${tmp_dir}/stdout.log"
	"${tester}" "${exe}" ${args} > "${stdout_log}"
	status="${?}"

	if [ -n "${expected_status}" ]; then
		if [ "${expected_status}" = "${status}" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ -n "${expected_stdout}" ]; then
		if [ "${expected_stdout}" = "$(cat ${stdout_log})" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ -n "${unexpected_status}" ]; then
		if [ "${unexpected_status}" != "${status}" ]; then
			result="OK"
		else
			result="NG"
		fi
	elif [ "$(typename test_status)" = "shell function" ]; then
		test_status "${status}"
		result=$(test_result "${?}")
	else
		testcmd
		result=$(test_result "${?}")
	fi
	print_result "${t}" "${result}"

	if [ "$(typename postcmd)" = "shell function" ]; then
		postcmd
	fi
done

rm -rf "${tmp_dir}" || exit 1
