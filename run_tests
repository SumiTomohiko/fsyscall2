#!/bin/sh

# usage: run_tests [options] [tests...]
# If no test is given, run_tests tests all test_* under tests directory.

show_title()
{
	local cmd len line mark screen_size title unused

	mark="$1"
	title=" $2 "
	screen_size="80"
	len=$(((${screen_size} - ${#title}) / 2))
	line=""
	for unused in $(jot ${len})
	do
		line="${line}${mark}"
	done
	echo -n "${line}"
	echo -n "${title}"
	if [ $((2 * ${len} + ${#title})) != "${screen_size}" ]; then
		line="${line}${mark}"
	fi
	echo -n "${line}"
	echo
}

typename()
{
	local name

	name="${1}"

	type "${name}" 2>/dev/null | sed -e "s/^.* is a //"
}

print_result()
{
	echo "${1}: ${2}"
}

test_result()
{
	local status
	local result
	status="${1}"

	if [ "${status}" = "0" ]; then
		result="OK"
	else
		result="NG"
	fi
	echo "${result}"
}

isset()
{
	local name
	name="$1"

	set | grep -o "^${name}="
}

kldstat | grep -w fmaster.ko > /dev/null 2>&1
if [ $? -ne 0 ]; then
	echo -n "You are missing fmaster.ko."
	echo " Please \"sudo kldload fmaster\" before tests."
	exit 1
fi

dir="$(dirname $0)"
tests_dir="${dir}/tests"
tester="${tests_dir}/tester/tester"
tester_opts=""
tmp_dir="${dir}/tmp.tests"
arch=$(uname -p)

YES="yes"
NO="no"

filter="/usr/bin/true"
repeat="1"
java="${NO}"
ssl="${NO}"
stop_on_ng="${NO}"
syslog=""
while [ 0 -lt $# ]
do
	case "$1" in
	"--filter")
		filter="$2"
		shift 2
		;;
	"--java")
		java="${YES}"
		shift
		;;
	"--ssl")
		ssl="${YES}"
		shift
		;;
	"--repeat")
		repeat="$2"
		shift 2
		;;
	"--stop-on-ng")
		stop_on_ng="${YES}"
		shift
		;;
	"--syslog")
		syslog="$2"
		shift 2
		;;
	*)
		break
		;;
	esac
done

if [ $# -eq 0 ]; then
	case "${java}" in
	"${YES}")
		tests=$(find "${tests_dir}" -name "test_*" | sort)
		;;
	*)
		tests=$(find "${tests_dir}" -name "test_*" | grep -wv java								   | sort)
		;;
	esac
else
	tests="${@}"
fi

case "${java}" in
"${YES}")
	tester="${tests_dir}/java_tester/java_tester"
	case "${ssl}" in
	"${YES}")
		ssl_dir="${tests_dir}/ssl"
		tester_opts="--ssl"
		tester_opts="${tester_opts} --cert=${ssl_dir}/cert.pem"
		tester_opts="${tester_opts} --private=${ssl_dir}/private.pem"
		tester_opts="${tester_opts} --keystore=${ssl_dir}/cacerts.jks"
		tester_opts="${tester_opts} --keystore-password=hogehoge"
		;;
	*)
		;;
	esac
	;;
*)
	case "${ssl}" in
	"${YES}")
		echo "error: ssl is available only for java." 1>&2
		exit 1
		;;
	*)
		;;
	esac
	;;
esac

show_title "*" "Running Tests"
summary=""
for n in $(jot ${repeat})
do
	for t in ${tests}
	do
		if [ "${n}" -eq 1 ]; then
			title="${t}"
		else
			title="${t}[${n}]"
		fi
		show_title "=" "${title}"

		"${filter}" "${t}"
		if [ $? != 0 ]; then
			print_result "${t}" "SKIP"
			continue
		fi

		rm -rf "${tmp_dir}" || exit 1
		mkdir -p "${tmp_dir}" || exit 1

		unset actual_stdout args cmd expected_status expected_stdout
		unset opts status timeout unexpected_status
		unset -f postcmd precmd test_status test_stdout
		. "${t}"

		if [ "$(typename precmd)" = "shell function" ]; then
			precmd
		fi

		exe="${tests_dir}/${arch}/${cmd}"
		stdout_log="${tmp_dir}/stdout.log"

		if [ -n "${syslog}" ]; then
			tail -0cf /var/log/all.log > "${syslog}" &
			tailpid="$!"
		fi

		opts="${tester_opts} --timeout=${timeout}"
		"${tester}" ${opts} "${exe}" ${args} > "${stdout_log}"
		status="${?}"

		if [ -n "${syslog}" ]; then
			kill -TERM "${tailpid}"
		fi

		if [ "${status}" = 255 ]; then
			result="NG (timeouted)"
		elif [ -n "$(isset expected_status)" ]; then
			if [ "${expected_status}" -eq "${status}" ]; then
				result="OK"
			else
				result="NG (actual: ${status})"
			fi
		elif [ -n "$(isset expected_stdout)" ]; then
			actual_stdout="$(cat ${stdout_log})"
			if [ "${expected_stdout}" = "${actual_stdout}" ]; then
				result="OK"
			else
				result="NG (unexpected stdout)"
			fi
		elif [ -n "$(isset unexpected_status)" ]; then
			if [ "${unexpected_status}" != "${status}" ]; then
				result="OK"
			else
				result="NG (unexpected status)"
			fi
		elif [ "$(typename test_stdout)" = "shell function" ]; then
			test_stdout < "${stdout_log}"
			result=$(test_result "${?}")
		elif [ "$(typename test_status)" = "shell function" ]; then
			test_status "${status}"
			result=$(test_result "${?}")
		else
			testcmd
			result=$(test_result "${?}")
		fi

		print_result "${t}" "${result}"
		if [ "${result}" != "OK" ]; then
			summary="${t}
${summary}"
		fi

		if [ "$(typename postcmd)" = "shell function" ]; then
			postcmd
		fi

		if [ "${result}" != "OK" ] && [ "${stop_on_ng}" = "${YES}" ]
		then
			break 2
		fi
	done
done

rm -rf "${tmp_dir}" || exit 1

show_title "*" "Summary"
if [ -n "${summary}" ]; then
	echo -n "${summary}" | sort -u
	status="1"
else
	echo "No Failure \(^o^)/"
	status="0"
fi

exit "${status}"
