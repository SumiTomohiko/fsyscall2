 $FreeBSD: src/sys/kern/syscalls.master,v 1.271.2.1.2.1 2011/11/11 04:20:22 kensmith Exp $
;	from: @(#)syscalls.master	8.2 (Berkeley) 1/13/94
;
; System call name/number master file.
; Processed to created init_sysent.c, syscalls.c and syscall.h.

; Columns: number audit type name alt{name,tag,rtyp}/comments
;	number	system call number, must be in order
;	audit	the audit event associated with the system call
;		A value of AUE_NULL means no auditing, but it also means that
;		there is no audit event for the call at this time. For the
;		case where the event exists, but we don't want auditing, the
;		event should be #defined to AUE_NULL in audit_kevents.h.
;	type	one of STD, OBSOL, UNIMPL, COMPAT, COMPAT4, COMPAT6,
;		COMPAT7, NODEF, NOARGS, NOPROTO, NOSTD
;		The COMPAT* options may be combined with one or more NO*
;		options separated by '|' with no spaces (e.g. COMPAT|NOARGS)
;	name	psuedo-prototype of syscall routine
;		If one of the following alts is different, then all appear:
;	altname	name of system call if different
;	alttag	name of args struct tag if different from [o]`name'"_args"
;	altrtyp	return type if not int (bogus - syscalls always return int)
;		for UNIMPL/OBSOL, name continues with comments

; types:
;	STD	always included
;	COMPAT	included on COMPAT #ifdef
;	COMPAT4	included on COMPAT4 #ifdef (FreeBSD 4 compat)
;	COMPAT6	included on COMPAT6 #ifdef (FreeBSD 6 compat)
;	COMPAT7	included on COMPAT7 #ifdef (FreeBSD 7 compat)
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only
;	NOSTD	implemented but as a lkm that can be statically
;		compiled in; sysent entry will be filled with lkmressys
;		so the SYSCALL_MODULE macro works
;	NOARGS	same as STD except do not create structure in sys/sysproto.h
;	NODEF	same as STD except only have the entry in the syscall table
;		added.  Meaning - do not create structure or function
;		prototype in sys/sysproto.h
;	NOPROTO	same as STD except do not create structure or
;		function prototype in sys/sysproto.h.  Does add a
;		definition to syscall.h besides adding a sysent.
;	NOTSTATIC syscall is loadable
;
; Please copy any additions and changes to the following compatability tables:
; sys/compat/freebsd32/syscalls.master

; #ifdef's, etc. may be included, and are copied to the output files.

#include <sys/param.h>
#include <sys/stat.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <sys/fmaster/fmaster_proto.h>

0	AUE_NULL	NOPROTO	{ int nosys(void); } syscall nosys_args int
1	AUE_EXIT	STD	{ void fmaster_exit(int rval); } exit \
				    fmaster_exit_args void
2	AUE_FORK	STD	{ int fmaster_fork(void); }
3	AUE_NULL	STD	{ ssize_t fmaster_read(int fd, void *buf, \
				    size_t nbytes); }
4	AUE_NULL	STD	{ ssize_t fmaster_write(int fd, \
				    const void *buf, size_t nbytes); }
5	AUE_OPEN_RWTC	STD	{ int fmaster_open(char *path, int flags, \
				    int mode); }
6	AUE_CLOSE	STD	{ int fmaster_close(int fd); }
7	AUE_WAIT4	STD	{ int fmaster_wait4(int pid, int *status, \
				    int options, struct rusage *rusage); } \
				    wait4 fmaster_wait4_args int
8	AUE_CREAT	OBSOL	creat
9	AUE_LINK	STD	{ int fmaster_link(char *path1, char *path2); }
10	AUE_UNLINK	STD	{ int fmaster_unlink(char *path); }
11	AUE_NULL	OBSOL	execv
12	AUE_CHDIR	STD	{ int fmaster_chdir(char *path); }
13	AUE_FCHDIR	STD	{ int fmaster_fchdir(int fd); }
14	AUE_MKNOD	STD	{ int fmaster_mknod(char *path, int mode, \
				    int dev); }
15	AUE_CHMOD	STD	{ int fmaster_chmod(char *path, int mode); }
16	AUE_CHOWN	STD	{ int fmaster_chown(char *path, int uid, \
				    int gid); }
17	AUE_NULL	NOPROTO	{ int obreak(char *nsize); } break \
				    obreak_args int
18	AUE_GETFSSTAT	OBSOL	getfsstat
19	AUE_LSEEK	OBSOL	lseek
20	AUE_GETPID	STD	{ pid_t fmaster_getpid(void); }
21	AUE_MOUNT	STD	{ int fmaster_mount(char *type, char *path, \
				    int flags, caddr_t data); }
22	AUE_UMOUNT	STD	{ int fmaster_unmount(char *path, int flags); }
23	AUE_SETUID	STD	{ int fmaster_setuid(uid_t uid); }
24	AUE_GETUID	STD	{ uid_t fmaster_getuid(void); }
25	AUE_GETEUID	STD	{ uid_t fmaster_geteuid(void); }
26	AUE_PTRACE	STD	{ int fmaster_ptrace(int req, pid_t pid, \
				    caddr_t addr, int data); }
27	AUE_RECVMSG	STD	{ int fmaster_recvmsg(int s, \
				    struct msghdr *msg, int flags); }
28	AUE_SENDMSG	STD	{ int fmaster_sendmsg(int s, \
				    struct msghdr *msg, int flags); }
29	AUE_RECVFROM	STD	{ int fmaster_recvfrom(int s, caddr_t buf, \
				    size_t len, int flags, \
				    struct sockaddr * __restrict from, \
				    __socklen_t * __restrict fromlenaddr); }
30	AUE_ACCEPT	STD	{ int fmaster_accept(int s, \
				    struct sockaddr * __restrict name, \
				    __socklen_t * __restrict anamelen); }
31	AUE_GETPEERNAME	STD	{ int fmaster_getpeername(int fdes, \
				    struct sockaddr * __restrict asa, \
				    __socklen_t * __restrict alen); }
32	AUE_GETSOCKNAME	STD	{ int fmaster_getsockname(int fdes, \
				    struct sockaddr * __restrict asa, \
				    __socklen_t * __restrict alen); }
33	AUE_ACCESS	STD	{ int fmaster_access(char *path, int flags); }
34	AUE_CHFLAGS	STD	{ int fmaster_chflags(char *path, int flags); }
35	AUE_FCHFLAGS	STD	{ int fmaster_fchflags(int fd, int flags); }
36	AUE_SYNC	STD	{ int fmaster_sync(void); }
37	AUE_KILL	STD	{ int fmaster_kill(int pid, int signum); }
38	AUE_STAT	OBSOL	stat
39	AUE_GETPPID	STD	{ pid_t fmaster_getppid(void); }
40	AUE_LSTAT	OBSOL	lstat
41	AUE_DUP		STD	{ int fmaster_dup(u_int fd); }
42	AUE_PIPE	STD	{ int fmaster_pipe(void); }
43	AUE_GETEGID	STD	{ gid_t fmaster_getegid(void); }
44	AUE_PROFILE	STD	{ int fmaster_profil(caddr_t samples, \
				    size_t size, size_t offset, u_int scale); }
45	AUE_KTRACE	STD	{ int fmaster_ktrace(const char *fname, \
				    int ops, int facs, int pid); }
46	AUE_SIGACTION	OBSOL	sigaction
47	AUE_GETGID	STD	{ gid_t fmaster_getgid(void); }
48	AUE_SIGPROCMASK	OBSOL	sigprocmask
49	AUE_GETLOGIN	STD	{ int fmaster_getlogin(char *namebuf, u_int \
				    namelen); }
50	AUE_SETLOGIN	STD	{ int fmaster_setlogin(char *namebuf); }
51	AUE_ACCT	STD	{ int fmaster_acct(char *path); }
52	AUE_SIGPENDING	OBSOL	sigpending
53	AUE_SIGALTSTACK	NOPROTO	{ int sigaltstack(stack_t *ss, \
				    stack_t *oss); }
54	AUE_IOCTL	STD	{ int fmaster_ioctl(int fd, u_long com, \
				    caddr_t data); }
55	AUE_REBOOT	STD	{ int fmaster_reboot(int opt); }
56	AUE_REVOKE	STD	{ int fmaster_revoke(char *path); }
57	AUE_SYMLINK	STD	{ int fmaster_symlink(char *path, char *link); }
58	AUE_READLINK	STD	{ ssize_t fmaster_readlink(char *path, \
				    char *buf, size_t count); }
59	AUE_EXECVE	STD	{ int fmaster_execve(char *fname, char **argv, \
				    char **envv); }
60	AUE_UMASK	STD	{ int fmaster_umask(int newmask); } umask \
				    fmaster_umask_args int
61	AUE_CHROOT	STD	{ int fmaster_chroot(char *path); }
62	AUE_FSTAT	OBSOL	fstat
63	AUE_NULL	OBSOL	getkerninfo
64	AUE_NULL	OBSOL	getpagesize
65	AUE_MSYNC	STD	{ int fmaster_msync(void *addr, size_t len, \
				    int flags); }
66	AUE_VFORK	STD	{ int fmaster_vfork(void); }
67	AUE_NULL	OBSOL	vread
68	AUE_NULL	OBSOL	vwrite
69	AUE_SBRK	NOPROTO	{ int sbrk(int incr); }
70	AUE_SSTK	NOPROTO	{ int sstk(int incr); }
71	AUE_MMAP	OBSOL	mmap
72	AUE_O_VADVISE	STD	{ int fmaster_ovadvise(int anom); } vadvise \
				    fmaster_ovadvise_args int
73	AUE_MUNMAP	NOPROTO		{ int munmap(void *addr, size_t len); }
74	AUE_MPROTECT	NOPROTO	{ int mprotect(const void *addr, \
				    size_t len, int prot); }
75	AUE_MADVISE	NOPROTO	{ int madvise(void *addr, size_t len, \
				    int behav); }
76	AUE_NULL	OBSOL	vhangup
77	AUE_NULL	OBSOL	vlimit
78	AUE_MINCORE	NOPROTO	{ int mincore(const void *addr, \
				    size_t len, char *vec); }
79	AUE_GETGROUPS	STD	{ int fmaster_getgroups(u_int gidsetsize, \
				    gid_t *gidset); }
80	AUE_SETGROUPS	STD	{ int fmaster_setgroups(u_int gidsetsize, \
				    gid_t *gidset); }
81	AUE_GETPGRP	STD	{ int fmaster_getpgrp(void); }
82	AUE_SETPGRP	STD	{ int fmaster_setpgid(int pid, int pgid); }
83	AUE_SETITIMER	STD	{ int fmaster_setitimer(u_int which, struct \
				    itimerval *itv, struct itimerval *oitv); }
84	AUE_WAIT4	OBSOL	wait
85	AUE_SWAPON	NOPROTO	{ int swapon(char *name); }
86	AUE_GETITIMER	STD	{ int fmaster_getitimer(u_int which, \
				    struct itimerval *itv); }
87	AUE_SYSCTL	OBSOL	gethostname
88	AUE_SYSCTL	OBSOL	sethostname
89	AUE_GETDTABLESIZE	UNIMPL	{ int fmaster_getdtablesize(void); }
90	AUE_DUP2	STD	{ int fmaster_dup2(u_int from, u_int to); }
91	AUE_NULL	UNIMPL	getdopt
92	AUE_FCNTL	STD	{ int fmaster_fcntl(int fd, int cmd, \
				    long arg); }
93	AUE_SELECT	STD	{ int fmaster_select(int nd, fd_set *in, \
				    fd_set *ou, fd_set *ex, \
				    struct timeval *tv); }
94	AUE_NULL	UNIMPL	setdopt
95	AUE_FSYNC	STD	{ int fmaster_fsync(int fd); }
96	AUE_SETPRIORITY	STD	{ int fmaster_setpriority(int which, int who, \
				    int prio); }
97	AUE_SOCKET	STD	{ int fmaster_socket(int domain, int type, \
				    int protocol); }
98	AUE_CONNECT	STD	{ int fmaster_connect(int s, caddr_t name, \
				    int namelen); }
99	AUE_ACCEPT	OBSOL	accept
100	AUE_GETPRIORITY	STD	{ int fmaster_getpriority(int which, int who); }
101	AUE_SEND	OBSOL	send
102	AUE_RECV	OBSOL	recv
103	AUE_SIGRETURN	OBSOL	sigreturn
104	AUE_BIND	STD	{ int fmaster_bind(int s, caddr_t name, \
				    int namelen); }
105	AUE_SETSOCKOPT	STD	{ int fmaster_setsockopt(int s, int level, \
				    int name, caddr_t val, int valsize); }
106	AUE_LISTEN	STD	{ int fmaster_listen(int s, int backlog); }
107	AUE_NULL	OBSOL	vtimes
108	AUE_NULL	OBSOL	sigvec
109	AUE_NULL	OBSOL	sigblock
110	AUE_NULL	OBSOL	sigsetmask
111	AUE_NULL	OBSOL	sigsuspend
112	AUE_NULL	OBSOL	sigstack
113	AUE_RECVMSG	OBSOL	recvmsg
114	AUE_SENDMSG	OBSOL	sendmsg
115	AUE_NULL	OBSOL	vtrace
116	AUE_GETTIMEOFDAY	STD	{ int fmaster_gettimeofday(\
				    struct timeval *tp, struct timezone *tzp); }
117	AUE_GETRUSAGE	STD	{ int fmaster_getrusage(int who, \
				    struct rusage *rusage); }
118	AUE_GETSOCKOPT	STD	{ int fmaster_getsockopt(int s, int level, \
				    int name, caddr_t val, int *avalsize); }
119	AUE_NULL	UNIMPL	resuba (BSD/OS 2.x)
120	AUE_READV	STD	{ int fmaster_readv(int fd, \
				    struct iovec *iovp, u_int iovcnt); }
121	AUE_WRITEV	STD	{ int fmaster_writev(int fd, \
				    struct iovec *iovp, u_int iovcnt); }
122	AUE_SETTIMEOFDAY	STD	{ int fmaster_settimeofday(\
				    struct timeval *tv, struct timezone *tzp); }
123	AUE_FCHOWN	STD	{ int fmaster_fchown(int fd, int uid, \
				    int gid); }
124	AUE_FCHMOD	STD	{ int fmaster_fchmod(int fd, int mode); }
125	AUE_RECVFROM	OBSOL	recvfrom
126	AUE_SETREUID	STD	{ int fmaster_setreuid(int ruid, int euid); }
127	AUE_SETREGID	STD	{ int fmaster_setregid(int rgid, int egid); }
128	AUE_RENAME	STD	{ int fmaster_rename(char *from, char *to); }
129	AUE_TRUNCATE	OBSOL	truncate
130	AUE_FTRUNCATE	OBSOL	ftruncate
131	AUE_FLOCK	STD	{ int fmaster_flock(int fd, int how); }
132	AUE_MKFIFO	STD	{ int fmaster_mkfifo(char *path, int mode); }
133	AUE_SENDTO	STD	{ int fmaster_sendto(int s, caddr_t buf, \
				    size_t len, int flags, caddr_t to, \
				    int tolen); }
134	AUE_SHUTDOWN	STD	{ int fmaster_shutdown(int s, int how); }
135	AUE_SOCKETPAIR	STD	{ int fmaster_socketpair(int domain, int type, \
				    int protocol, int *rsv); }
136	AUE_MKDIR	STD	{ int fmaster_mkdir(char *path, int mode); }
137	AUE_RMDIR	STD	{ int fmaster_rmdir(char *path); }
138	AUE_UTIMES	STD	{ int fmaster_utimes(char *path, \
				    struct timeval *tptr); }
139	AUE_NULL	OBSOL	4.2 sigreturn
140	AUE_ADJTIME	STD	{ int fmaster_adjtime(struct timeval *delta, \
				    struct timeval *olddelta); }
141	AUE_GETPEERNAME	OBSOL	getpeername
142	AUE_SYSCTL	OBSOL	gethostid
143	AUE_SYSCTL	OBSOL	sethostid
144	AUE_GETRLIMIT	OBSOL	getrlimit
145	AUE_SETRLIMIT	OBSOL	setrlimit
146	AUE_KILLPG	OBSOL	killpg
147	AUE_SETSID	NOPROTO	{ int setsid(void); }
148	AUE_QUOTACTL	STD	{ int fmaster_quotactl(char *path, int cmd, \
				    int uid, caddr_t arg); }
149	AUE_O_QUOTA	OBSOL	quota
150	AUE_GETSOCKNAME	OBSOL	getsockname

151	AUE_NULL	UNIMPL	sem_lock (BSD/OS 2.x)
152	AUE_NULL	UNIMPL	sem_wakeup (BSD/OS 2.x)
153	AUE_NULL	UNIMPL	asyncdaemon (BSD/OS 2.x)
154	AUE_NULL	STD	{ int fmaster_nlm_syscall(int debug_level, \
				    int grace_period, int addr_count, \
				    char **addrs); }
155	AUE_NFS_SVC	STD	{ int fmaster_nfssvc(int flag, caddr_t argp); }
156	AUE_GETDIRENTRIES	OBSOL	getdirentries
157	AUE_STATFS	OBSOL	statfs
158	AUE_FSTATFS	OBSOL	fstatfs
159	AUE_NULL	UNIMPL	nosys
160	AUE_LGETFH	STD	{ int fmaster_lgetfh(char *fname, \
				    struct fhandle *fhp); }
161	AUE_NFS_GETFH	STD	{ int fmaster_getfh(char *fname, \
				    struct fhandle *fhp); }
162	AUE_SYSCTL	OBSOL	getdomainname
163	AUE_SYSCTL	OBSOL	setdomainname
164	AUE_NULL	OBSOL	uname
165	AUE_SYSARCH	NOPROTO	{ int sysarch(int op, char *parms); }
166	AUE_RTPRIO	STD	{ int fmaster_rtprio(int function, pid_t pid, \
				    struct rtprio *rtp); }
167	AUE_NULL	UNIMPL	nosys
168	AUE_NULL	UNIMPL	nosys
169	AUE_SEMSYS	STD	{ int fmaster_semsys(int which, int a2, \
				    int a3, int a4, int a5); }
170	AUE_MSGSYS	STD	{ int fmaster_msgsys(int which, int a2, \
				    int a3, int a4, int a5, int a6); }
171	AUE_SHMSYS	STD	{ int fmaster_shmsys(int which, int a2, \
				    int a3, int a4); }
172	AUE_NULL	UNIMPL	nosys
173	AUE_PREAD	UNIMPL	{ ssize_t fmaster_freebsd6_pread(int fd, \
				    void *buf, size_t nbyte, int pad, \
				    off_t offset); }
174	AUE_PWRITE	UNIMPL	{ ssize_t fmaster_freebsd6_pwrite(int fd, \
				    const void *buf, size_t nbyte, int pad, \
				    off_t offset); }
175	AUE_NULL	STD	{ int fmaster_setfib(int fibnum); }
176	AUE_NTP_ADJTIME	STD	{ int fmaster_ntp_adjtime(struct timex *tp); }
177	AUE_NULL	UNIMPL	sfork (BSD/OS 2.x)
178	AUE_NULL	UNIMPL	getdescriptor (BSD/OS 2.x)
179	AUE_NULL	UNIMPL	setdescriptor (BSD/OS 2.x)
180	AUE_NULL	UNIMPL	nosys

181	AUE_SETGID	STD	{ int fmaster_setgid(gid_t gid); }
182	AUE_SETEGID	STD	{ int fmaster_setegid(gid_t egid); }
183	AUE_SETEUID	STD	{ int fmaster_seteuid(uid_t euid); }
184	AUE_NULL	UNIMPL	lfs_bmapv
185	AUE_NULL	UNIMPL	lfs_markv
186	AUE_NULL	UNIMPL	lfs_segclean
187	AUE_NULL	UNIMPL	lfs_segwait
188	AUE_STAT	STD	{ int fmaster_stat(char *path, \
				    struct stat *ub); }
189	AUE_FSTAT	STD	{ int fmaster_fstat(int fd, struct stat *sb); }
190	AUE_LSTAT	STD	{ int fmaster_lstat(char *path, \
				    struct stat *ub); }
191	AUE_PATHCONF	STD	{ int fmaster_pathconf(char *path, int name); }
192	AUE_FPATHCONF	STD	{ int fmaster_fpathconf(int fd, int name); }
193	AUE_NULL	UNIMPL	nosys
194	AUE_GETRLIMIT	NOPROTO	{ int getrlimit(u_int which, \
				    struct rlimit *rlp); } getrlimit \
				    __getrlimit_args int
195	AUE_SETRLIMIT	STD	{ int fmaster_setrlimit(u_int which, \
				    struct rlimit *rlp); } setrlimit \
				    fmaster_setrlimit_args int
196	AUE_GETDIRENTRIES	STD	{ int fmaster_getdirentries(int fd, \
				    char *buf, u_int count, long *basep); }
197	AUE_MMAP	UNIMPL	{ caddr_t fmaster_freebsd6_mmap(caddr_t addr, \
				    size_t len, int prot, int flags, int fd, \
				    int pad, off_t pos); }
198	AUE_NULL	NOPROTO	{ int nosys(void); } __syscall \
				    __syscall_args int
199	AUE_LSEEK	UNIMPL	{ off_t fmaster_freebsd6_lseek(int fd, \
				    int pad, off_t offset, int whence); }
200	AUE_TRUNCATE	UNIMPL	{ int fmaster_freebsd6_truncate(char *path, \
				    int pad, off_t length); }
201	AUE_FTRUNCATE	UNIMPL	{ int fmaster_freebsd6_ftruncate(int fd, \
				    int pad, off_t length); }
202	AUE_SYSCTL	NOPROTO	{ int __sysctl(int *name, \
				    u_int namelen, void *old, size_t *oldlenp, \
				    void *new, size_t newlen); } __sysctl \
				    sysctl_args int
203	AUE_MLOCK	NOPROTO	{ int mlock(const void *addr, \
				    size_t len); }
204	AUE_MUNLOCK	NOPROTO	{ int munlock(const void *addr, \
				    size_t len); }
205	AUE_UNDELETE	STD	{ int fmaster_undelete(char *path); }
206	AUE_FUTIMES	STD	{ int fmaster_futimes(int fd, \
				    struct timeval *tptr); }
207	AUE_GETPGID	STD	{ int fmaster_getpgid(pid_t pid); }
208	AUE_NULL	UNIMPL	newreboot (NetBSD)
209	AUE_POLL	STD	{ int fmaster_poll(struct pollfd *fds, \
				    u_int nfds, int timeout); }

210	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
211	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
212	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
213	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
214	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
215	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
216	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
217	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
218	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int
219	AUE_NULL	NODEF|NOTSTATIC	lkmnosys lkmnosys nosys_args int

220	AUE_SEMCTL	NOSTD|NOPROTO	{ int __semctl(int semid, int semnum, \
				    int cmd, union semun_old *arg); }
221	AUE_SEMGET	NOSTD|NOPROTO	{ int semget(key_t key, int nsems, \
				    int semflg); }
222	AUE_SEMOP	NOSTD|NOPROTO	{ int semop(int semid, \
				    struct sembuf *sops, size_t nsops); }
223	AUE_NULL	UNIMPL	semconfig
224	AUE_MSGCTL	NOSTD|NOPROTO	{ int msgctl(int msqid, int cmd, \
				    struct msqid_ds_old *buf); }
225	AUE_MSGGET	NOSTD|NOPROTO	{ int msgget(key_t key, int msgflg); }
226	AUE_MSGSND	NOSTD|NOPROTO	{ int msgsnd(int msqid, \
				    const void *msgp, size_t msgsz, \
				    int msgflg); }
227	AUE_MSGRCV	NOSTD|NOPROTO	{ int msgrcv(int msqid, void *msgp, \
				    size_t msgsz, long msgtyp, int msgflg); }
228	AUE_SHMAT	NOSTD|NOPROTO	{ int shmat(int shmid, \
				    const void *shmaddr, int shmflg); }
229	AUE_SHMCTL	NOSTD|NOPROTO	{ int shmctl(int shmid, int cmd, \
				    struct shmid_ds_old *buf); }
230	AUE_SHMDT	NOSTD|NOPROTO	{ int shmdt(const void *shmaddr); }
231	AUE_SHMGET	NOSTD|NOPROTO	{ int shmget(key_t key, size_t size, \
				    int shmflg); }

232	AUE_NULL	NOPROTO	{ int clock_gettime(\
				    clockid_t clock_id, struct timespec *tp); }
233	AUE_CLOCK_SETTIME	STD	{ int fmaster_clock_settime( \
				    clockid_t clock_id, \
				    const struct timespec *tp); }
234	AUE_NULL	STD	{ int fmaster_clock_getres(clockid_t clock_id, \
				    struct timespec *tp); }
235	AUE_NULL	STD	{ int fmaster_ktimer_create(\
				    clockid_t clock_id, struct sigevent *evp, \
				    int *timerid); }
236	AUE_NULL	STD	{ int fmaster_ktimer_delete(int timerid); }
237	AUE_NULL	STD	{ int fmaster_ktimer_settime(int timerid, \
				    int flags, const struct itimerspec *value, \
				    struct itimerspec *ovalue); }
238	AUE_NULL	STD	{ int fmaster_ktimer_gettime(int timerid, \
				    struct itimerspec *value); }
239	AUE_NULL	STD	{ int fmaster_ktimer_getoverrun(int timerid); }
240	AUE_NULL	NOPROTO	{ int nanosleep(\
				    const struct timespec *rqtp, \
				    struct timespec *rmtp); }
241	AUE_NULL	UNIMPL	nosys
242	AUE_NULL	UNIMPL	nosys
243	AUE_NULL	UNIMPL	nosys
244	AUE_NULL	UNIMPL	nosys
245	AUE_NULL	UNIMPL	nosys
246	AUE_NULL	UNIMPL	nosys
247	AUE_NULL	UNIMPL	nosys
248	AUE_NULL	UNIMPL	{ int fmaster_ntp_gettime(\
				    struct ntptimeval *ntvp); }
249	AUE_NULL	UNIMPL	nosys

250	AUE_MINHERIT	NOPROTO	{ int minherit(void *addr, size_t len, \
				    int inherit); }
251	AUE_RFORK	STD	{ int fmaster_rfork(int flags); }
252	AUE_POLL	UNIMPL	{ int fmaster_openbsd_poll(struct pollfd *fds, \
				    u_int nfds, int timeout); }
253	AUE_ISSETUGID	STD	{ int fmaster_issetugid(void); }
254	AUE_LCHOWN	STD	{ int fmaster_lchown(char *path, int uid, \
				    int gid); }
255	AUE_NULL	STD	{ int fmaster_aio_read(struct aiocb *aiocbp); }
256	AUE_NULL	STD	{ int fmaster_aio_write(struct aiocb *aiocbp); }
257	AUE_NULL	STD	{ int fmaster_lio_listio(int mode, \
				    struct aiocb * const *acb_list, \
				    int nent, struct sigevent *sig); }
258	AUE_NULL	UNIMPL	nosys
259	AUE_NULL	UNIMPL	nosys
260	AUE_NULL	UNIMPL	nosys
261	AUE_NULL	UNIMPL	nosys
262	AUE_NULL	UNIMPL	nosys
263	AUE_NULL	UNIMPL	nosys
264	AUE_NULL	UNIMPL	nosys
265	AUE_NULL	UNIMPL	nosys
266	AUE_NULL	UNIMPL	nosys
267	AUE_NULL	UNIMPL	nosys
268	AUE_NULL	UNIMPL	nosys
269	AUE_NULL	UNIMPL	nosys
270	AUE_NULL	UNIMPL	nosys
271	AUE_NULL	UNIMPL	nosys
272	AUE_O_GETDENTS	STD	{ int fmaster_getdents(int fd, char *buf, \
				    size_t count); }
273	AUE_NULL	UNIMPL	nosys
274	AUE_LCHMOD	STD	{ int fmaster_lchmod(char *path, mode_t mode); }
275	AUE_LCHOWN	UNIMPL	{ int lchown(char *path, uid_t uid, \
				    gid_t gid); } fmaster_netbsd_lchown \
				    fmaster_lchown_args int
276	AUE_LUTIMES	STD	{ int fmaster_lutimes(char *path, \
				    struct timeval *tptr); }
277	AUE_MSYNC	UNIMPL	{ int fmaster_msync(void *addr, size_t len, \
				    int flags); } fmaster_netbsd_msync \
				    fmaster_msync_args int
278	AUE_STAT	STD	{ int fmaster_nstat(char *path, \
				    struct nstat *ub); }
279	AUE_FSTAT	STD	{ int fmaster_nfstat(int fd, \
				    struct nstat *sb); }
280	AUE_LSTAT	STD	{ int fmaster_nlstat(char *path, \
				    struct nstat *ub); }
281	AUE_NULL	UNIMPL	nosys
282	AUE_NULL	UNIMPL	nosys
283	AUE_NULL	UNIMPL	nosys
284	AUE_NULL	UNIMPL	nosys
285	AUE_NULL	UNIMPL	nosys
286	AUE_NULL	UNIMPL	nosys
287	AUE_NULL	UNIMPL	nosys
288	AUE_NULL	UNIMPL	nosys

289	AUE_PREADV	STD	{ ssize_t fmaster_preadv(int fd, \
				    struct iovec *iovp, u_int iovcnt, \
				    off_t offset); }
290	AUE_PWRITEV	STD	{ ssize_t fmaster_pwritev(int fd, \
				    struct iovec *iovp, u_int iovcnt, \
				    off_t offset); }
291	AUE_NULL	UNIMPL	nosys
292	AUE_NULL	UNIMPL	nosys
293	AUE_NULL	UNIMPL	nosys
294	AUE_NULL	UNIMPL	nosys
295	AUE_NULL	UNIMPL	nosys
296	AUE_NULL	UNIMPL	nosys

297	AUE_FHSTATFS	OBSOL	fhstatfs
298	AUE_FHOPEN	STD	{ int fmaster_fhopen(\
				    const struct fhandle *u_fhp, int flags); }
299	AUE_FHSTAT	STD	{ int fmaster_fhstat(\
				    const struct fhandle *u_fhp, \
				    struct stat *sb); }

300	AUE_NULL	UNIMPL	{ int fmaster_modnext(int modid); }
301	AUE_NULL	UNIMPL	{ int fmaster_modstat(int modid, \
				    struct module_stat *stat); }
302	AUE_NULL	UNIMPL	{ int fmaster_modfnext(int modid); }
303	AUE_NULL	UNIMPL	{ int fmaster_modfind(const char *name); }
304	AUE_MODLOAD	UNIMPL	{ int fmaster_kldload(const char *file); }
305	AUE_MODUNLOAD	UNIMPL	{ int fmaster_kldunload(int fileid); }
306	AUE_NULL	UNIMPL	{ int fmaster_kldfind(const char *file); }
307	AUE_NULL	UNIMPL	{ int fmaster_kldnext(int fileid); }
308	AUE_NULL	UNIMPL	{ int fmaster_kldstat(int fileid, struct \
				    kld_file_stat* stat); }
309	AUE_NULL	UNIMPL	{ int fmaster_kldfirstmod(int fileid); }
310	AUE_GETSID	STD	{ int fmaster_getsid(pid_t pid); }
311	AUE_SETRESUID	STD	{ int fmaster_setresuid(uid_t ruid, \
				    uid_t euid, uid_t suid); }
312	AUE_SETRESGID	STD	{ int fmaster_setresgid(gid_t rgid, \
				    gid_t egid, gid_t sgid); }
313	AUE_NULL	OBSOL	signanosleep
314	AUE_NULL	UNIMPL	{ int fmaster_aio_return(\
				    struct aiocb *aiocbp); }
315	AUE_NULL	UNIMPL	{ int fmaster_aio_suspend( \
				    struct aiocb * const * aiocbp, int nent, \
				    const struct timespec *timeout); }
316	AUE_NULL	UNIMPL	{ int fmaster_aio_cancel(int fd, \
				    struct aiocb *aiocbp); }
317	AUE_NULL	UNIMPL	{ int fmaster_aio_error(struct aiocb *aiocbp); }
318	AUE_NULL	UNIMPL	{ int fmaster_oaio_read(\
				    struct oaiocb *aiocbp); }
319	AUE_NULL	UNIMPL	{ int fmaster_oaio_write(\
				    struct oaiocb *aiocbp); }
320	AUE_NULL	UNIMPL	{ int fmaster_olio_listio(int mode, \
				    struct oaiocb * const *acb_list, \
				    int nent, struct osigevent *sig); }
321	AUE_NULL	UNIMPL	{ int fmaster_yield(void); }
322	AUE_NULL	OBSOL	thr_sleep
323	AUE_NULL	OBSOL	thr_wakeup
324	AUE_MLOCKALL	NOPROTO	{ int mlockall(int how); }
325	AUE_MUNLOCKALL	NOPROTO	{ int munlockall(void); }
326	AUE_GETCWD	UNIMPL	{ int fmaster___getcwd(u_char *buf, \
				    u_int buflen); }

327	AUE_NULL	UNIMPL	{ int fmaster_sched_setparam (pid_t pid, \
				    const struct sched_param *param); }
328	AUE_NULL	UNIMPL	{ int fmaster_sched_getparam (pid_t pid, \
				    struct sched_param *param); }

329	AUE_NULL	UNIMPL	{ int fmaster_sched_setscheduler (pid_t pid, \
				    int policy, const struct sched_param \
				    *param); }
330	AUE_NULL	UNIMPL	{ int fmaster_sched_getscheduler (pid_t pid); }

331	AUE_NULL	UNIMPL	{ int fmaster_sched_yield (void); }
332	AUE_NULL	UNIMPL	{ int fmaster_sched_get_priority_max (\
				    int policy); }
333	AUE_NULL	UNIMPL	{ int fmaster_sched_get_priority_min (\
				    int policy); }
334	AUE_NULL	UNIMPL	{ int fmaster_sched_rr_get_interval (\
				    pid_t pid, struct timespec *interval); }
335	AUE_NULL	UNIMPL	{ int fmaster_utrace(const void *addr, \
				    size_t len); }
336	AUE_SENDFILE	OBSOL	sendfile
337	AUE_NULL	UNIMPL	{ int fmaster_kldsym(int fileid, int cmd, \
				    void *data); }
338	AUE_JAIL	UNIMPL	{ int fmaster_jail(struct jail *jail); }
339	AUE_NULL	UNIMPL	{ int fmaster_nnpfs_syscall(int operation, \
				    char *a_pathP, int a_opcode, \
				    void *a_paramsP, int a_followSymlinks); }
340	AUE_SIGPROCMASK	NOPROTO	{ int sigprocmask(int how, \
				    const sigset_t *set, sigset_t *oset); }
341	AUE_SIGSUSPEND	NOPROTO	{ int sigsuspend(const sigset_t *sigmask); }
342	AUE_SIGACTION	OBSOL	sigaction
343	AUE_SIGPENDING	NOPROTO	{ int sigpending(sigset_t *set); }
344	AUE_SIGRETURN	OBSOL	sigreturn
345	AUE_SIGWAIT	NOPROTO	{ int sigtimedwait(const sigset_t *set, \
				    siginfo_t *info, \
				    const struct timespec *timeout); }
346	AUE_NULL	NOPROTO	{ int sigwaitinfo(const sigset_t *set, \
				    siginfo_t *info); }
347	AUE_NULL	UNIMPL	{ int fmaster___acl_get_file(const char *path, \
				    acl_type_t type, struct acl *aclp); }
348	AUE_NULL	UNIMPL	{ int fmaster___acl_set_file(const char *path, \
				    acl_type_t type, struct acl *aclp); }
349	AUE_NULL	UNIMPL	{ int fmaster___acl_get_fd(int filedes, \
				    acl_type_t type, struct acl *aclp); }
350	AUE_NULL	UNIMPL	{ int fmaster___acl_set_fd(int filedes, \
				    acl_type_t type, struct acl *aclp); }
351	AUE_NULL	UNIMPL	{ int fmaster___acl_delete_file(\
				    const char *path, acl_type_t type); }
352	AUE_NULL	UNIMPL	{ int fmaster___acl_delete_fd(int filedes, \
				    acl_type_t type); }
353	AUE_NULL	UNIMPL	{ int fmaster___acl_aclcheck_file(\
				    const char *path, acl_type_t type, \
				    struct acl *aclp); }
354	AUE_NULL	UNIMPL	{ int fmaster___acl_aclcheck_fd(int filedes, \
				    acl_type_t type, struct acl *aclp); }

355	AUE_EXTATTRCTL	UNIMPL	{ int fmaster_extattrctl(const char *path, \
				    int cmd, const char *filename, \
				    int attrnamespace, const char *attrname); }
356	AUE_EXTATTR_SET_FILE	UNIMPL	{ int fmaster_extattr_set_file( \
				    const char *path, int attrnamespace, \
				    const char *attrname, void *data, \
				    size_t nbytes); }
357	AUE_EXTATTR_GET_FILE	UNIMPL	{ ssize_t fmaster_extattr_get_file( \
				    const char *path, int attrnamespace, \
				    const char *attrname, void *data, \
				    size_t nbytes); }
358	AUE_EXTATTR_DELETE_FILE	UNIMPL	{ int fmaster_extattr_delete_file(\
				    const char *path, int attrnamespace, \
				    const char *attrname); }
359	AUE_NULL	UNIMPL	{ int fmaster_aio_waitcomplete( \
				    struct aiocb **aiocbp, \
				    struct timespec *timeout); }
360	AUE_GETRESUID	STD	{ int fmaster_getresuid(uid_t *ruid, \
				    uid_t *euid, uid_t *suid); }
361	AUE_GETRESGID	STD	{ int fmaster_getresgid(gid_t *rgid, \
				    gid_t *egid, gid_t *sgid); }
362	AUE_KQUEUE	UNIMPL	{ int fmaster_kqueue(void); }
363	AUE_NULL	UNIMPL	{ int fmaster_kevent(int fd, \
				    struct kevent *changelist, int nchanges, \
				    struct kevent *eventlist, int nevents, \
				    const struct timespec *timeout); }
364	AUE_NULL	UNIMPL	__cap_get_proc
365	AUE_NULL	UNIMPL	__cap_set_proc
366	AUE_NULL	UNIMPL	__cap_get_fd
367	AUE_NULL	UNIMPL	__cap_get_file
368	AUE_NULL	UNIMPL	__cap_set_fd
369	AUE_NULL	UNIMPL	__cap_set_file
370	AUE_NULL	UNIMPL	nosys
371	AUE_EXTATTR_SET_FD	UNIMPL	{ int fmaster_extattr_set_fd(int fd, \
				    int attrnamespace, const char *attrname, \
				    void *data, size_t nbytes); }
372	AUE_EXTATTR_GET_FD	UNIMPL	{ ssize_t fmaster_extattr_get_fd(\
				    int fd, int attrnamespace, \
				    const char *attrname, void *data, \
				    size_t nbytes); }
373	AUE_EXTATTR_DELETE_FD	UNIMPL	{ int fmaster_extattr_delete_fd(\
				    int fd, int attrnamespace, \
				    const char *attrname); }
374	AUE_NULL	UNIMPL	{ int fmaster___setugid(int flag); }
375	AUE_NULL	UNIMPL	nfsclnt
376	AUE_EACCESS	UNIMPL	{ int fmaster_eaccess(char *path, int flags); }
377	AUE_NULL	UNIMPL	{ int fmaster_afs3_syscall(long syscall, \
				    long parm1, long parm2, long parm3, \
				    long parm4, long parm5, long parm6); }
378	AUE_NMOUNT	UNIMPL	{ int fmaster_nmount(struct iovec *iovp, \
				    unsigned int iovcnt, int flags); }
379	AUE_NULL	UNIMPL	kse_exit
380	AUE_NULL	UNIMPL	kse_wakeup
381	AUE_NULL	UNIMPL	kse_create
382	AUE_NULL	UNIMPL	kse_thr_interrupt
383	AUE_NULL	UNIMPL	kse_release
384	AUE_NULL	UNIMPL	{ int fmaster___mac_get_proc(\
				    struct mac *mac_p); }
385	AUE_NULL	UNIMPL	{ int fmaster___mac_set_proc(\
				    struct mac *mac_p); }
386	AUE_NULL	UNIMPL	{ int fmaster___mac_get_fd(int fd, \
				    struct mac *mac_p); }
387	AUE_NULL	UNIMPL	{ int fmaster___mac_get_file(\
				    const char *path_p, struct mac *mac_p); }
388	AUE_NULL	UNIMPL	{ int fmaster___mac_set_fd(int fd, \
				    struct mac *mac_p); }
389	AUE_NULL	UNIMPL	{ int fmaster___mac_set_file(\
				    const char *path_p, struct mac *mac_p); }
390	AUE_NULL	UNIMPL	{ int fmaster_kenv(int what, const char *name, \
				    char *value, int len); }
391	AUE_LCHFLAGS	STD	{ int fmaster_lchflags(const char *path, \
				    int flags); }
392	AUE_NULL	NOPROTO	{ int uuidgen(struct uuid *store, \
				    int count); }
393	AUE_SENDFILE	STD	{ int fmaster_sendfile(int fd, int s, \
				    off_t offset, size_t nbytes, \
				    struct sf_hdtr *hdtr, off_t *sbytes, \
				    int flags); }
394	AUE_NULL	UNIMPL	{ int fmaster_mac_syscall(const char *policy, \
				    int call, void *arg); }
395	AUE_GETFSSTAT	NOPROTO	{ int getfsstat(struct statfs *buf, \
				    long bufsize, int flags); }
396	AUE_STATFS	NOPROTO	{ int statfs(char *path, \
				    struct statfs *buf); }
397	AUE_FSTATFS	STD	{ int fmaster_fstatfs(int fd, \
				    struct statfs *buf); }
398	AUE_FHSTATFS	STD	{ int fmaster_fhstatfs(\
				    const struct fhandle *u_fhp, \
				    struct statfs *buf); }
399	AUE_NULL	UNIMPL	nosys
400	AUE_NULL	UNIMPL	{ int fmaster_ksem_close(semid_t id); }
401	AUE_NULL	UNIMPL	{ int fmaster_ksem_post(semid_t id); }
402	AUE_NULL	UNIMPL	{ int fmaster_ksem_wait(semid_t id); }
403	AUE_NULL	UNIMPL	{ int fmaster_ksem_trywait(semid_t id); }
404	AUE_NULL	UNIMPL	{ int fmaster_ksem_init(semid_t *idp, \
				    unsigned int value); }
405	AUE_NULL	UNIMPL	{ int fmaster_ksem_open(semid_t *idp, \
				    const char *name, int oflag, \
				    mode_t mode, unsigned int value); }
406	AUE_NULL	UNIMPL	{ int fmaster_ksem_unlink(const char *name); }
407	AUE_NULL	UNIMPL	{ int fmaster_ksem_getvalue(semid_t id, \
				    int *val); }
408	AUE_NULL	UNIMPL	{ int fmaster_ksem_destroy(semid_t id); }
409	AUE_NULL	UNIMPL	{ int fmaster___mac_get_pid(pid_t pid, \
				    struct mac *mac_p); }
410	AUE_NULL	UNIMPL	{ int fmaster___mac_get_link(\
				    const char *path_p, struct mac *mac_p); }
411	AUE_NULL	UNIMPL	{ int fmaster___mac_set_link(\
				    const char *path_p, struct mac *mac_p); }
412	AUE_EXTATTR_SET_LINK	UNIMPL	{ int fmaster_extattr_set_link( \
				    const char *path, int attrnamespace, \
				    const char *attrname, void *data, \
				    size_t nbytes); }
413	AUE_EXTATTR_GET_LINK	UNIMPL	{ ssize_t fmaster_extattr_get_link( \
				    const char *path, int attrnamespace, \
				    const char *attrname, void *data, \
				    size_t nbytes); }
414	AUE_EXTATTR_DELETE_LINK	UNIMPL	{ int fmaster_extattr_delete_link( \
				    const char *path, int attrnamespace, \
				    const char *attrname); }
415	AUE_NULL	UNIMPL	{ int fmaster___mac_execve(char *fname, \
				    char **argv, char **envv, \
				    struct mac *mac_p); }
416	AUE_SIGACTION	NOPROTO	{ int sigaction(int sig, \
				    const struct sigaction *act, \
				    struct sigaction *oact); }
417	AUE_SIGRETURN	NOPROTO	{ int sigreturn( \
				    const struct __ucontext *sigcntxp); }
418	AUE_NULL	UNIMPL	__xstat
419	AUE_NULL	UNIMPL	__xfstat
420	AUE_NULL	UNIMPL	__xlstat
421	AUE_NULL	NOPROTO	{ int getcontext(\
				    struct __ucontext *ucp); }
422	AUE_NULL	STD	{ int fmaster_setcontext( \
				    const struct __ucontext *ucp); }
423	AUE_NULL	STD	{ int fmaster_swapcontext(\
				    struct __ucontext *oucp, \
				    const struct __ucontext *ucp); }
424	AUE_SWAPOFF	NOPROTO	{ int swapoff(const char *name); }
425	AUE_NULL	UNIMPL	{ int fmaster___acl_get_link(const char *path, \
				    acl_type_t type, struct acl *aclp); }
426	AUE_NULL	UNIMPL	{ int fmaster___acl_set_link(const char *path, \
				    acl_type_t type, struct acl *aclp); }
427	AUE_NULL	UNIMPL	{ int fmaster___acl_delete_link(\
				    const char *path, acl_type_t type); }
428	AUE_NULL	UNIMPL	{ int fmaster___acl_aclcheck_link(\
				    const char *path, acl_type_t type, \
				    struct acl *aclp); }
429	AUE_SIGWAIT	NOPROTO	{ int sigwait(const sigset_t *set, \
				    int *sig); }
430	AUE_NULL	STD	{ int fmaster_thr_create(ucontext_t *ctx, \
				    long *id, int flags); }
431	AUE_NULL	STD	{ void fmaster_thr_exit(long *state); }
432	AUE_NULL	NOPROTO	{ int thr_self(long *id); }
433	AUE_NULL	NOPROTO	{ int thr_kill(long id, int sig); }
434	AUE_NULL	NOPROTO	{ int _umtx_lock(struct umtx *umtx); }
435	AUE_NULL	NOPROTO	{ int _umtx_unlock(struct umtx *umtx); }
436	AUE_NULL	UNIMPL	{ int fmaster_jail_attach(int jid); }
437	AUE_EXTATTR_LIST_FD	UNIMPL	{ ssize_t fmaster_extattr_list_fd(\
				    int fd, int attrnamespace, void *data, \
				    size_t nbytes); }
438	AUE_EXTATTR_LIST_FILE	UNIMPL	{ ssize_t fmaster_extattr_list_file( \
				    const char *path, int attrnamespace, \
				    void *data, size_t nbytes); }
439	AUE_EXTATTR_LIST_LINK	UNIMPL	{ ssize_t fmaster_extattr_list_link( \
				    const char *path, int attrnamespace, \
				    void *data, size_t nbytes); }
440	AUE_NULL	UNIMPL	kse_switchin
441	AUE_NULL	UNIMPL	{ int fmaster_ksem_timedwait(semid_t id, \
				    const struct timespec *abstime); }
442	AUE_NULL	STD	{ int fmaster_thr_suspend( \
				    const struct timespec *timeout); }
443	AUE_NULL	STD	{ int fmaster_thr_wake(long id); }
444	AUE_MODUNLOAD	UNIMPL	{ int fmaster_kldunloadf(int fileid, \
				    int flags); }
445	AUE_AUDIT	UNIMPL	{ int fmaster_audit(const void *record, \
				    u_int length); }
446	AUE_AUDITON	UNIMPL	{ int fmaster_auditon(int cmd, void *data, \
				    u_int length); }
447	AUE_GETAUID	UNIMPL	{ int fmaster_getauid(uid_t *auid); }
448	AUE_SETAUID	UNIMPL	{ int fmaster_setauid(uid_t *auid); }
449	AUE_GETAUDIT	UNIMPL	{ int fmaster_getaudit(\
				    struct auditinfo *auditinfo); }
450	AUE_SETAUDIT	UNIMPL	{ int fmaster_setaudit(\
				    struct auditinfo *auditinfo); }
451	AUE_GETAUDIT_ADDR	UNIMPL	{ int fmaster_getaudit_addr( \
				    struct auditinfo_addr *auditinfo_addr, \
				    u_int length); }
452	AUE_SETAUDIT_ADDR	UNIMPL	{ int fmaster_setaudit_addr( \
				    struct auditinfo_addr *auditinfo_addr, \
				    u_int length); }
453	AUE_AUDITCTL	UNIMPL	{ int fmaster_auditctl(char *path); }
454	AUE_NULL	NOPROTO	{ int _umtx_op(void *obj, int op, \
				    u_long val, void *uaddr1, void *uaddr2); }
455	AUE_NULL	STD	{ int fmaster_thr_new(struct thr_param *param, \
				    int param_size); }
456	AUE_NULL	NOPROTO	{ int sigqueue(pid_t pid, int signum, void *value); }
457	AUE_NULL	UNIMPL	{ int fmaster_kmq_open(const char *path, \
				    int flags, mode_t mode, \
				    const struct mq_attr *attr); }
458	AUE_NULL	UNIMPL	{ int fmaster_kmq_setattr(int mqd, \
				    const struct mq_attr *attr,	\
				    struct mq_attr *oattr); }
459	AUE_NULL	UNIMPL	{ int fmaster_kmq_timedreceive(int mqd, \
				    char *msg_ptr, size_t msg_len, \
				    unsigned *msg_prio, \
				    const struct timespec *abs_timeout); }
460	AUE_NULL	UNIMPL	{ int fmaster_kmq_timedsend(int mqd, \
				    const char *msg_ptr, size_t msg_len, \
				    unsigned msg_prio, \
				    const struct timespec *abs_timeout);}
461	AUE_NULL	UNIMPL	{ int fmaster_kmq_notify(int mqd, \
				    const struct sigevent *sigev); }
462	AUE_NULL	UNIMPL	{ int fmaster_kmq_unlink(const char *path); }
463	AUE_NULL	STD	{ int fmaster_abort2(const char *why, \
				    int nargs, void **args); }
464	AUE_NULL	STD	{ int fmaster_thr_set_name(long id, \
				    const char *name); }
465	AUE_NULL	UNIMPL	{ int fmaster_aio_fsync(int op, \
				    struct aiocb *aiocbp); }
466	AUE_RTPRIO	NOPROTO	{ int rtprio_thread(int function, \
				    lwpid_t lwpid, struct rtprio *rtp); }
467	AUE_NULL	UNIMPL	nosys
468	AUE_NULL	UNIMPL	nosys
469	AUE_NULL	UNIMPL	__getpath_fromfd
470	AUE_NULL	UNIMPL	__getpath_fromaddr
471	AUE_NULL	UNIMPL	{ int fmaster_sctp_peeloff(int sd, \
				    uint32_t name); }
472     AUE_NULL        UNIMPL	{ int fmaster_sctp_generic_sendmsg(int sd, \
				    caddr_t msg, int mlen, caddr_t to, \
				    __socklen_t tolen, \
				    struct sctp_sndrcvinfo *sinfo, int flags); }
473     AUE_NULL        UNIMPL	{ int fmaster_sctp_generic_sendmsg_iov(int sd, \
				    struct iovec *iov, int iovlen, caddr_t to, \
				    __socklen_t tolen, \
				    struct sctp_sndrcvinfo *sinfo, int flags); }
474     AUE_NULL        UNIMPL	{ int fmaster_sctp_generic_recvmsg(int sd, \
				    struct iovec *iov, int iovlen, \
				    struct sockaddr * from, \
				    __socklen_t *fromlenaddr, \
				    struct sctp_sndrcvinfo *sinfo, \
				    int *msg_flags); }
475	AUE_PREAD	STD	{ ssize_t fmaster_pread(int fd, void *buf, \
				    size_t nbyte, off_t offset); }
476	AUE_PWRITE	STD	{ ssize_t fmaster_pwrite(int fd, \
				    const void *buf, size_t nbyte, \
				    off_t offset); }
477	AUE_MMAP	STD	{ caddr_t fmaster_mmap(caddr_t addr, \
				    size_t len, int prot, int flags, int fd, \
				    off_t pos); }
478	AUE_LSEEK	STD	{ off_t fmaster_lseek(int fd, off_t offset, \
				    int whence); }
479	AUE_TRUNCATE	STD	{ int fmaster_truncate(char *path, \
				    off_t length); }
480	AUE_FTRUNCATE	STD	{ int fmaster_ftruncate(int fd, off_t length); }
481	AUE_KILL	STD	{ int fmaster_thr_kill2(pid_t pid, long id, \
				    int sig); }
482	AUE_SHMOPEN	NOPROTO	{ int shm_open(const char *path, \
				    int flags, mode_t mode); }
483	AUE_SHMUNLINK	NOPROTO	{ int shm_unlink(const char *path); }
484	AUE_NULL	NOPROTO	{ int cpuset(cpusetid_t *setid); }
485	AUE_NULL	NOPROTO	{ int cpuset_setid(cpuwhich_t which, \
				    id_t id, cpusetid_t setid); }
486	AUE_NULL	NOPROTO	{ int cpuset_getid(cpulevel_t level, \
				    cpuwhich_t which, id_t id, \
				    cpusetid_t *setid); }
487	AUE_NULL	NOPROTO	{ int cpuset_getaffinity(\
				    cpulevel_t level, cpuwhich_t which, \
				    id_t id, size_t cpusetsize, \
				    cpuset_t *mask); }
488	AUE_NULL	NOPROTO	{ int cpuset_setaffinity(\
				    cpulevel_t level, cpuwhich_t which, \
				    id_t id, size_t cpusetsize, \
				    const cpuset_t *mask); }
489	AUE_FACCESSAT	STD	{ int fmaster_faccessat(int fd, char *path, \
				    int mode, int flag); }
490	AUE_FCHMODAT	STD	{ int fmaster_fchmodat(int fd, char *path, \
				    mode_t mode, int flag); }
491	AUE_FCHOWNAT	STD	{ int fmaster_fchownat(int fd, char *path, \
				    uid_t uid, gid_t gid, int flag); }
492	AUE_FEXECVE	STD	{ int fmaster_fexecve(int fd, char **argv, \
				    char **envv); }
493	AUE_FSTATAT	STD	{ int fmaster_fstatat(int fd, char *path, \
				    struct stat *buf, int flag); }
494	AUE_FUTIMESAT	STD	{ int fmaster_futimesat(int fd, char *path, \
				    struct timeval *times); }
495	AUE_LINKAT	STD	{ int fmaster_linkat(int fd1, char *path1, \
				    int fd2, char *path2, int flag); }
496	AUE_MKDIRAT	STD	{ int fmaster_mkdirat(int fd, char *path, \
				    mode_t mode); }
497	AUE_MKFIFOAT	STD	{ int fmaster_mkfifoat(int fd, char *path, \
				    mode_t mode); }
498	AUE_MKNODAT	STD	{ int fmaster_mknodat(int fd, char *path, \
				    mode_t mode, dev_t dev); }

499	AUE_OPENAT_RWTC	STD	{ int fmaster_openat(int fd, char *path, \
				    int flag, mode_t mode); }
500	AUE_READLINKAT	STD	{ int fmaster_readlinkat(int fd, char *path, \
				    char *buf, size_t bufsize); }
501	AUE_RENAMEAT	STD	{ int fmaster_renameat(int oldfd, char *old, \
				    int newfd, char *new); }
502	AUE_SYMLINKAT	STD	{ int fmaster_symlinkat(char *path1, int fd, \
				    char *path2); }
503	AUE_UNLINKAT	STD	{ int fmaster_unlinkat(int fd, char *path, \
				    int flag); }
504	AUE_POSIX_OPENPT	STD	{ int fmaster_posix_openpt(int flags); }

505	AUE_NULL	UNIMPL	{ int fmaster_gssd_syscall(char *path); }
506	AUE_NULL	UNIMPL	{ int fmaster_jail_get(struct iovec *iovp, \
				    unsigned int iovcnt, int flags); }
507	AUE_NULL	UNIMPL	{ int fmaster_jail_set(struct iovec *iovp, \
				    unsigned int iovcnt, int flags); }
508	AUE_NULL	UNIMPL	{ int fmaster_jail_remove(int jid); }
509	AUE_CLOSEFROM	UNIMPL	{ int fmaster_closefrom(int lowfd); }
510	AUE_SEMCTL	UNIMPL	{ int fmaster___semctl(int semid, int semnum, \
				    int cmd, union semun *arg); }
511	AUE_MSGCTL	STD	{ int fmaster_msgctl(int msqid, int cmd, \
				    struct msqid_ds *buf); }
512	AUE_SHMCTL	NOPROTO	{ int shmctl(int shmid, int cmd, \
				    struct shmid_ds *buf); }
513	AUE_LPATHCONF	STD	{ int fmaster_lpathconf(char *path, int name); }
514	AUE_CAP_NEW	UNIMPL	{ int fmaster_cap_new(int fd, \
				    u_int64_t rights); }
515	AUE_CAP_GETRIGHTS	UNIMPL	{ int fmaster_cap_getrights(int fd, \
				    u_int64_t *rightsp); }
516	AUE_CAP_ENTER	UNIMPL	{ int fmaster_cap_enter(void); }
517	AUE_CAP_GETMODE	UNIMPL	{ int fmaster_cap_getmode(u_int *modep); }
518	AUE_PDFORK	UNIMPL	{ int fmaster_pdfork(int *fdp, int flags); }
519	AUE_PDKILL	UNIMPL	{ int fmaster_pdkill(int fd, int signum); }
520	AUE_PDGETPID	UNIMPL	{ int fmaster_pdgetpid(int fd, pid_t *pidp); }
521	AUE_PDWAIT	UNIMPL	pdwait4
522	AUE_SELECT	UNIMPL	{ int fmaster_pselect(int nd, fd_set *in, \
				    fd_set *ou, fd_set *ex, \
				    const struct timespec *ts, \
				    const sigset_t *sm); }
523	AUE_NULL	STD	{ int fmaster_getloginclass(char *namebuf, \
				    size_t namelen); }
524	AUE_NULL	STD	{ int fmaster_setloginclass(\
				    const char *namebuf); }
525	AUE_NULL	UNIMPL	{ int fmaster_rctl_get_racct(\
				    const void *inbufp, size_t inbuflen, \
				    void *outbufp, size_t outbuflen); }
526	AUE_NULL	UNIMPL	{ int fmaster_rctl_get_rules(\
				    const void *inbufp, size_t inbuflen, \
				    void *outbufp, size_t outbuflen); }
527	AUE_NULL	UNIMPL	{ int fmaster_rctl_get_limits(\
				    const void *inbufp, size_t inbuflen, \
				    void *outbufp, size_t outbuflen); }
528	AUE_NULL	UNIMPL	{ int fmaster_rctl_add_rule(\
				    const void *inbufp, size_t inbuflen, \
				    void *outbufp, size_t outbuflen); }
529	AUE_NULL	UNIMPL	{ int fmaster_rctl_remove_rule(\
				    const void *inbufp, size_t inbuflen, \
				    void *outbufp, size_t outbuflen); }
530	AUE_NULL	UNIMPL	{ int fmaster_posix_fallocate(int fd, \
				    off_t offset, off_t len); }
531	AUE_NULL	UNIMPL	posix_fadvise
